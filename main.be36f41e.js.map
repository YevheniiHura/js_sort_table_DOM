{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tableHead","addEventListener","e","tableBody","headingIndex","target","cellIndex","rowsArray","rows","sort","firstElement","secondElement","firstContent","cells","textContent","secondContent","parseInt","isNaN","slice","localeCompare","append"],"mappings":";AAAA,aAKA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAHA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAYH,EAAME,cAAc,SAEtCC,EAAUC,iBAAiB,QAAS,SAACC,GAC7BC,IAAAA,EAAYN,EAAME,cAAc,SAChCK,EAAeF,EAAEG,OAAOC,UAExBC,EAAgBJ,EAAAA,EAAUK,MAEhCD,EAAUE,KAAK,SAACC,EAAcC,GACtBC,IAAAA,EAAeF,EAAaG,MAAMT,GAAcU,YAChDC,EAAgBJ,EAAcE,MAAMT,GAAcU,YAEpDE,OAAAA,SAASJ,MAAmBA,EACvBA,EAAeG,EAGpBE,MAAMD,SAASJ,EAAaM,MAAM,KAC7BN,EAAaO,cAAcJ,GAE3BC,SAASJ,EAAaM,MAAM,IAAMF,SAASD,EAAcG,MAAM,MAI1Ef,EAAUiB,OAAVjB,MAAAA,EAAoBI,EAAAA","file":"main.be36f41e.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tableHead = table.querySelector('thead');\n\ntableHead.addEventListener('click', (e) => {\n  const tableBody = table.querySelector('tbody');\n  const headingIndex = e.target.cellIndex;\n\n  const rowsArray = [...tableBody.rows];\n\n  rowsArray.sort((firstElement, secondElement) => {\n    const firstContent = firstElement.cells[headingIndex].textContent;\n    const secondContent = secondElement.cells[headingIndex].textContent;\n\n    if (parseInt(firstContent) === +firstContent) {\n      return firstContent - secondContent;\n    };\n\n    if (isNaN(parseInt(firstContent.slice(1)))) {\n      return firstContent.localeCompare(secondContent);\n    } else {\n      return parseInt(firstContent.slice(1)) - parseInt(secondContent.slice(1));\n    }\n  });\n\n  tableBody.append(...rowsArray);\n});\n"]}